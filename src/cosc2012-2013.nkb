% Knowledge base for the native shell.
% Contains rules (in pure Prolog) for Computer Science courses at Brock.
%
% NOTE: Does not contain rules for:
%       - Computer Science as a Second Degree Program
%       - Combined Major Program
%       - Minors (since they are non-cosc).
%
% @author ideler.dennis@gmail.com (Dennis Ideler)

% TODO: make sure there's no errors in the course logic
% TODO: better naming (e.g. c([...]) is not descriptive)
% TODO: remove underscores, add quotes. e.g. software_engineering -> 'software engineering'

% course(Code, Name) :-
%   course(course_code_of_prereq), <-- To check if prereqs have prereqs.
%   ...
%   dependencies([prereqs, ...]).
%
% (!) Each course must contain itself as a dependency,
%     otherwise the course is solved based solely on its prereqs.
%     We need to know if the user has the credit for the current course by asking.
%
% Course rules may contain more information in a future update.
% In that case, it will be neater to format the rules such as:
%
% course(Code, Name, Description, ...) :-
%   Name = cosc_1P00,
%   Description = 'The ultimate course, you will learn everything.',
%   ...
%   dependencies([...]).

% TODO: improve visual layout by organizing courses by program (e.g. all math courses first, then cosc, etc)

course(cosc_1P02, 'Introduction to Computer Science') :-
  c([cosc_1P02]).
course(cosc_1P03, 'Data Structures and Abstraction') :-
  course(cosc_1P02,_),
  c([cosc_1P02, cosc_1P03]).
course(cosc_1P50, 'Integrity and Literacy in the Information Age') :-
  c([cosc_1P50]).
course(math_1P01, 'Calculus Concepts I') :-
  c([math_1P01]).
  % Prerequisite(s): two grade 12 mathematics credits including MCV4U or permission of the instructor.
course(math_1P02, 'Calculus Concepts II') :-
  course(math_1P01,_),
  course(math_1P05,_),
  c([math_1P01, math_1P05, math_1P02]).
course(math_1P66, 'Mathematical Reasoning') :-
  c([math_1P66]).
course(math_1P67, 'Mathematics for Computer Science') :-
  course(math_1P66,_),
  c([math_1P66, math_1P67]).
course(math_1P12, 'Linear Algebra I') :-
  c([math_1P12]).
  % Prerequisite(s): two grade 12 mathematics credits or permission of instructor.
course(math_2P12, 'Linear Algebra II') :-
  course(math_1P12,_),
  c([math_1P12, math_2P12]).
course(math_1P97, 'Calculus with Applications') :-
  c([math_1P97]).
  % Prerequisite(s): one grade 12 mathematics credit
course(math_1P98, 'Practical Statistics') :-
  c([math_1P98]).
  % Prerequisite(s): one grade 12 mathematics credit or MATH 1P20.
course(math_1P05, 'Applied Calculus I') :-
  c([math_1P05]).
  % Prerequisite(s): two grade 12 mathematics credits including MCV4U or permission of the instructor.
course(math_1P06, 'Applied Calculus II') :-
  course(math_1P05,_),
  c([math_1P05, math_1P06]).
course(math_2P75, 'Introductory Financial Mathematics') :-
  course(math_1P97,_),
  course(math_1P98,_),
  c([math_1P97, math_1P98, math_2P75]).
course(math_3P12, 'Applied Algebra') :-
  course(math_2P12,_),
  c([math_2P12, math_3P12]).
course(math_3P60, 'Numerical Methods') :-
  course(math_1P02,_),
  course(math_1P12,_),
  c([math_1P02, math_1P12, math_3P60]).
course(math_3P73, 'Game Theory') :-
  course(math_2P72,_),
  c([math_2P72, math_3P73]).
course(math_2P71, 'Introduction to Combinatorics') :-
  c([math_2P71]).
  % Prerequisite(s): two 4U/M mathematics credits or permission of the instructor.
course(math_2P72, 'Discrete Optimization') :-
  course(math_1P12,_),
  c([math_1P12, math_2P72]).
course(math_2P03, 'Multivariate and Vector Calculus') :-
  course(math_1P02,_),
  course(math_1P06,_),
  c([math_1P02, math_1P06, math_2P03]).
course(math_2P81, 'Probability') :-
  course(math_2P03,_),
  c([math_2P03, math_2P81]).
  % Special case: math_2P03 can be a prereq OR coreq.
course(cosc_2P03, 'Advanced Data Structures') :-
  course(cosc_1P03,_),
  c([cosc_1P03, cosc_2P03]).
course(cosc_2P12, 'Computer Organization and Assembly Language') :-
  course(cosc_1P03,_),
  c([cosc_1P03, cosc_2P12]).
course(cosc_2P13, 'Introduction to Operating Systems') :-
  course(cosc_2P12,_),
  c([cosc_2P12, cosc_2P13]).
course(cosc_2P32, 'File and Database Systems') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_2P32]).
course(cosc_2P89, 'Internet Technologies') :-
  course(cosc_1P03,_),
  c([cosc_1P03, cosc_2P89]).
course(cosc_2P90, 'Programming Languages and Object-Orientation') :-
  course(cosc_1P03,_),
  c([cosc_1P03, cosc_2P90]).
course(cosc_2P91, 'Procedural Programming') :-
  course(cosc_1P03,_),
  c([cosc_1P03, cosc_2P91]).
course(cosc_2P93, 'Logic Programming') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_2P93]).
course(cosc_2P96, 'Introduction to 3D Modelling and Animation') :-
  c([cosc_2P96]).
course(cosc_3F00, 'Software Engineering') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_3F00]).
%  c([one_and_one-half_cosc_credits]). % TODO: use a different name than what's used for specific courses
                                      % TODO: have shell determine first if requirement met by counting, if not, then ask
course(cosc_3P01, 'Introduction to Computer Networking') :-
  course(cosc_2P03,_),
  course(cosc_2P13,_),
  course(math_1P67,_),
  c([cosc_2P03, cosc_2P13, math_1P67, cosc_3P01]).
course(cosc_3P03, 'Algorithms') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_3P03]).
course(cosc_3P40, 'Advanced Object-Oriented Programming') :-
%  c([two_cosc_credits]). % TODO
  c([cosc_3P40]).
course(cosc_3P71, 'Artificial Intelligence') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_3P71]).
course(cosc_3P92, 'Computer Architecture') :-
  course(cosc_2P13,_),
  c([cosc_2P13, cosc_3P92]).
course(cosc_3P93, 'Parallel Computing') :-
  course(cosc_2P13,_),
  c([cosc_2P13, cosc_3P93]).
course(cosc_3P94, 'Introduction to Human Computer Interaction') :-
%  c(two_cosc_credits). % TODO
  c([cosc_3P94]).
course(cosc_3P95, 'Embedded Software') :-
  course(cosc_2P13,_),
  c([cosc_2P13, cosc_3P95]).
course(cosc_3P96, 'Discrete Event Simulation') :-
  c([cosc_3P96]).
course(cosc_3P98, 'Computer Graphics') :-
%  c([three_cosc_credits]). % TODO
  course(cosc_2P03,_),
  course(math_1P12,_),
  c([cosc_2P03, math_1P12, cosc_3P98]).
course(cosc_3P99, 'Computing Project') :-
  course(cosc_2P03,_),
  c([cosc_2P03, cosc_3P99]).
course(cosc_3V97, 'Mobile Computing') :-
  course(cosc_2P13,_),
  course(cosc_2P32,_),
  c([cosc_2P13, cosc_2P32, cosc_3V97]).
course(cosc_4F90, 'Computing Project') :-
  course(cosc_3F00,_),
  c([cosc_3F00, cosc_4F90]).
course(cosc_4P03, 'Advanced Algorithms') :-
  course(cosc_3P03,_),
  c([cosc_3P03, cosc_4P03]).
course(cosc_4P13, 'Operating Systems: Design and Implementation') :-
  course(cosc_2P13,_),
  course(cosc_2P91,_),
  c([cosc_2P13, cosc_2P91, cosc_4P13]).
course(cosc_4P14, 'Computer Networks') :-
  course(cosc_3P01,_),
  c([cosc_3P01, cosc_4P14]).
course(cosc_4P41, 'Functional Programming') :-
%  c(three_and_one-half_cosc_credits). % TODO
  c([cosc_4P41]).
course(cosc_4P42, 'Formal Methods in Software Engineering') :-
%  c(three_and_one-half_cosc_credits). % TODO
  course(math_1P67,_),
  c([math_1P67, cosc_4P42]).
course(cosc_4P61, 'Theory of Computation') :-
  course(math_1P67,_),
  c([math_1P67, cosc_4P61]).
course(cosc_4P75, 'Compiler Construction') :-
  course(cosc_2P03,_),
  course(cosc_2P12,_),
  course(cosc_2P90,_),
  c([cosc_2P03, cosc_2P12, cosc_2P90, cosc_4P75]).
course(cosc_4P76, 'Machine Learning') :-
  course(cosc_3P71,_),
  c([cosc_3P71, cosc_4P76]).
course(cosc_4P78, 'Robotics') :-
  course(cosc_3P71,_),
  c([cosc_3P71, cosc_4P78]).
course(cosc_4P79, 'Expert Systems') :-
  course(cosc_2P93,_),
  course(cosc_3P71,_),
  c([cosc_2P93, cosc_3P71, cosc_4P79]).
course(cosc_4P80, 'Artificial Neural Networks') :-
  course(cosc_3P71,_),
  c([cosc_3P71, cosc_4P80]).
course(cosc_4P87, 'Foundations of Reasoning under Uncertainty') :-
  course(cosc_3P71,_),
  c([cosc_3P71, cosc_4P87]).
course(cosc_4P98, 'Topics in Computer Media and Digital Audio') :-
  c([cosc_4P98]).
%  c(three_and_one-half_cosc_credits). % TODO
course(cosc_0N01, 'Co-op Work Placement I') :-
  c([cosc_0N01]).
course(cosc_0N02, 'Co-op Work Placement II') :-
  c([cosc_0N02]).
course(cosc_0N03, 'Co-op Work Placement III') :-
  c([cosc_0N03]).
course(cosc_2C01, 'Co-op Reflective Learning and Integration I') :-
  course(scie_0N90,_),
  c([scie_0N90, cosc_2C01]).
%  corequisite(course(cosc_0N01)). % TODO: make a new predicate for coreqs
course(cosc_2C02, 'Co-op Reflective Learning and Integration II') :-
  course(scie_0N90,_),
  c([scie_0N90, cosc_2C02]).
%  corequisite(course(cosc_0N02)). % TODO
course(cosc_2C03, 'Co-op Reflective Learning and Integration III') :-
  course(scie_0N90,_),
  c([scie_0N90, cosc_2C03]).
%  corequisite(course(cosc_0N03)). % TODO
course(scie_0N90, 'Co-op Training and Development') :-
  c([scie_0N90]).


top_goal(X) :- degree(X).

% TODO: need more lists, one for each option (and possibly more for abstraction)
%       if an answer is chosen that doesn't have an accompanying list, inference fails;
%       so it's important that we have lists for all possible answers
%
% (!) The part below here is messy due to testing, should be cleaned up.
%     The final version may look very different.


concentration_requirements(software_engineering) :-
  course(cosc_2P03,_),
  course(cosc_2P13,_),
  course(cosc_2P90,_),
  course(cosc_2P91,_),
  course(cosc_3F00,_),
  course(cosc_3P01,_),
  course(cosc_3P03,_),
  course(cosc_4P42,_),
  course(cosc_4P61,_).
  % TODO: one credit from COSC 3P92, 3P94, 4F90, 4P03, 4P13, 4P14, 4P75
  % use menuask?

concentration_requirements(intelligent_systems) :-
  course(cosc_2P03,_),
  course(cosc_2P32,_),
  course(cosc_2P90,_),
  course(cosc_2P93,_),
  course(cosc_3F00,_),
  course(cosc_3P03,_),
  course(cosc_3P71,_),
  course(cosc_4P61,_).
  % TODO: one and one-half credits from COSC 4F90, 4P76, 4P78, 4P79, 4P80, 4P87


% Graduate school entry requirements.
% TODO: add these missing courses to KB (!)
grad_school(group_one) :- % TODO: only one course from this group! use menuask?
  course(cosc_4P42,_),
  course(math_2P75,_),
  course(math_3P12,_),
  course(math_3P60,_),
  course(math_3P73,_).
grad_school(group_two) :- % TODO: only one course from this group! use menuask?
  course(math_2P12,_),
  course(math_2P71,_),
  course(math_2P72,_),
  course(math_2P81,_).
% TODO: one additional COSC credit

% Required courses that are shared between all COSC degree types.
core(first_year) :-
  course(cosc_1P02,_),
  course(cosc_1P03,_),
  course(cosc_1P50,_),
  course(math_1P12,_),
  course(math_1P66,_),
  course(math_1P67,_),
  course(math_1P98,_),
  course(math_1P05,_),
  course(math_1P06,_).

core(second_year) :-
  course(cosc_2P03,_),
  course(cosc_2P12,_),
  course(cosc_2P13,_),
  course(cosc_2P32,_),
  course(cosc_2P90,_).
  % TODO: 2P91 or 2P93, use menuask?

core(third_year) :-
  course(cosc_3F00,_).
  % TODO: 3P01 or 3P71 or 3P92

core(third_year_nonpass) :-
  core(third_year),
  course(cosc_3P03,_).

core(fourth_year) :-
  course(cosc_4P61,_).

% Although these are in the calendar, I don't think they're required to graduate.
% TODO: verify with Gord.
core(co-op) :- 
  course(scie_0N90,_),
  course(cosc_0N01,_),
  course(cosc_2C01,_),
  course(cosc_0N02,_),
  course(cosc_2C02,_),
  course(cosc_0N03,_),
  course(cosc_2C03,_).

core(minor) :- % FIXME: messy, but running short on time.
  c(['minor not in APCO or an approved set of at least 4 cohesive credits in an area other than COSC or APCO']).

% TODO: make sure courses/2 contains all prereqs, otherwise they won't show up as suggestions

courses(pass,[cosc_1P02, cosc_1P03, cosc_1P50, math_1P12, math_1P66, math_1P67,
              math_1P98, cosc_2P03, cosc_2P12, cosc_2P13, cosc_2P32, math_1P05,
              math_1P06, cosc_2P90, cosc_3F00]).
              % TODO: one of cosc_2P91, cosc_2P93
              % TODO: one of cosc_3P01, cosc_3P71, cosc_3P92
              % TODO: one humanities context credit
              % TODO: one-half elective credit
              % TODO: one social sciences context credit
              % TODO: one-half sciences context credit
              % TODO: one-half elective credit
              % TODO: one-half cosc credit
              % TODO: two elective credits

courses(honours_minor,[cosc_1P02, cosc_1P03, cosc_1P50, math_1P12, math_1P66, math_1P67,
              math_1P98, cosc_2P03, cosc_2P12, cosc_2P13, cosc_2P32, math_1P05,
              math_1P06, cosc_2P90, cosc_3P03, cosc_3F00, cosc_4P61,
              'minor not in APCO or an approved set of at least 4 cohesive credits in an area other than COSC or APCO']).
              % TODO: one of cosc_2P91, cosc_2P93
              % TODO: one of cosc_3P01, cosc_3P71, cosc_3P92
              % TODO: one humanities context credit
              % TODO: one-half elective credit
              % TODO: one social sciences context credit
              % TODO: one-half sciences context credit
              % TODO: one-half elective credit
              % TODO: one-half cosc credit
              % TODO: two elective credits

% TODO: all the other honours & co-op degrees, so don't test those as they won't work yet!

courses(4,[cosc_1P02, cosc_1P03, cosc_3P01, cosc_1P50]).  % TODO: TEST then remove

/********************************************************
 * TODO: courses/2 predicates for all possible degrees! *
 ********************************************************/

/* Pass degree */
degree(pass) :-
  program(pass),
  core(first_year),
  core(second_year),
  core(third_year).

/* Honours with a minor */
degree(honours_minor) :- % TODO: finish, add core courses...
  program(honours),
  honours_requirement(minor),
  concentration(none),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Honours with a minor and concentration in Intelligent Systems */
degree(honours_minor_ai) :- % TODO: finish
  program(honours),
  honours_requirement(minor),
  concentration(intelligent_systems),
  concentration_requirements(intelligent_systems),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Honours with a minor and concentration in Software Engineering */
degree(honours_minor_se) :- % TODO: finish
  program(honours),
  honours_requirement(minor),
  concentration(software_engineering),
  concentration_requirements(software_engineering),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Honours with graduate school entry requirements */
degree(honours_grad) :- % TODO: finish
  program(honours),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(none),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Honours with graduate school entry requirements
 * and concentration in Intelligent Systems */
degree(honours_grad_ai) :-  % TODO: finish
  program(honours),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(intelligent_systems), % Locks the user in this degree choice.
  concentration_requirements(intelligent_systems), % Now check the courses.
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Honours with a graduate school entry requirements
 * and concentration in Software Engineering */
degree(honours_grad_se) :- % TODO: finish
  program(honours),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(software_engineering),
  concentration_requirements(software_engineering),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with a minor */
degree(co-op_minor) :-
  program(co-op),
  honours_requirement(minor),
  concentration(none),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with a minor and concentration in Intelligent Systems */
degree(co-op_minor_ai) :-
  program(co-op),
  honours_requirement(minor),
  concentration(intelligent_systems),
  concentration_requirements(intelligent_systems),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with a minor and concentration in Software Engineering */
degree(co-op_minor_se) :-
  program(co-op),
  honours_requirement(minor),
  concentration(software_engineering),
  concentration_requirements(software_engineering),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with graduate school entry requirements */
degree(co-op_grad) :-
  program(co-op),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(none),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with graduate school entry requirements
 * and concentration in Intelligent Systems */
degree(co-op_grad_ai) :-
  program(co-op),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(intelligent_systems),
  concentration_requirements(intelligent_systems),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/* Co-op (Honours) with graduate school entry requirements
 * and concentration in Software Engineering */
degree(co-op_grad_se) :-
  program(co-op),
  honours_requirement('grad school entry'),
  % TODO: check courses for grad school entry;
  %       need to write the logic to choose one out of the group of courses.
  concentration(software_engineering),
  concentration_requirements(software_engineering),
  core(co-op),
  core(first_year),
  core(second_year),
  core(third_year_nonpass),
  core(fourth_year).

/*** stuff for testing

degree(2) :- % honours with grad school entry
  program(honours), % honours requires a minor or grad school requirements
  honours_requirement('grad school entry'),
  core(first).

degree(3) :-
  program(honours),
  honours_requirement(minor),
  core(first).

degree(4) :-
  program(co-op),
  course(cosc_1P02,_),
  course(cosc_1P03,_),
  course(cosc_3P01,_),
  course(cosc_1P50,_).

***/

% TODO: maybe make different asks for different types of questions?

c(X) :- ask_list(course,X). % NOTE: 'course' is the attribute being asserted, not 'c'.
program(X) :- menuask(program,X,[pass,honours,co-op]).
concentration(X) :- menuask(concentration,X,[intelligent_systems,software_engineering,none]).
honours_requirement(X) :- menuask(honours_requirement,X,['grad school entry',minor]).

multivalued(course). % Multivalued because a rule can have many courses.
multivalued(c). % TODO: remove, not being used -- verify before removing
