:- consult(op).
/*
top_goal(X) :- bird iz X.

order iz tubenose:-
    nostrils are external_tubular,
    live iz at_sea,
    bill iz hooked.
    
order iz waterfowl:-
    feet iz webbed,
    bill iz flat.
    
order iz falconiforms:-
    eats on meat,
    feet iz curved_talons,
    bill iz sharp_hooked.
    
order iz passerformes:-
    feet iz one_long_backward_toe.
    
family iz albatross:-
    order iz tubenose,
    size iz large,
    wings are long_narrow.
    
family iz swan :-
    order iz waterfowl,
    neck iz long,
    color iz white,
    flight iz ponderous.
    
family iz goose:-
    order iz waterfowl,
    size iz plump,
    flight iz powerful.
    
family iz duck:-
    order iz waterfowl,
    feed iz on_water_surface,
    flight iz agile.
    
family iz vulture:-
    order iz falconiforms,
    feed iz scavange,
    wings are broad.
    
family iz falcon:-
    order iz falconiforms,
    wings are long_pointed,
    head iz large,
    tail iz narrow_at_tip.
    
family iz flycatcher:-
    order iz passerformes,
    bill iz flat,
    eats on flying_insects.

family iz swallow:-
    order iz passerformes,
    wings are long_pointed,
    tail iz forked,
    bill iz short.
    
bird iz laysan_albatross:-
    family iz albatross,
    color iz white.
    
bird iz black_footed_albatross:-
    family iz albatross,
    color iz dark.

bird iz fulmar:-
    order iz tubenose,
    size iz medium,
    flight iz flap_glide.
    
bird iz whistling_swan:-
    family iz swan,
    voice iz muffled_musical_whistle.
    
bird iz trumpeter_swan:-
    family iz swan,
    voice iz loud_trumpeting.

bird iz canada_goose:-
    family iz goose,
    season iz winter,            % rules can be further broken down
    country iz united_states,        % to include regions and migration
    head iz black,                % patterns
    cheek iz white.
    
bird iz canada_goose:-
    family iz goose,
    season iz summer,
    country iz canada,
    head iz black,   
    cheek iz white.

bird iz snow_goose:-
    family iz goose,
    color iz white.
    
bird iz mallard :-
    family iz duck,            % different rules for male
    voice iz quack,
    head iz green.
    
bird iz mallard:-
    family iz duck,            % and female
    voice iz quack,
    color iz mottled_brown.
    
bird iz pintail:-
    family iz duck,
    voice iz short_whistle.
    
bird iz turkey_vulture:-
    family iz vulture,
    flight_profile iz v_shaped.
    
bird iz california_condor:-
    family iz vulture,
    flight_profile iz flat.
    
bird iz sparrow_hawk:-
    family iz falcon,
    eats on insects.
    
bird iz peregrine_falcon:-
    family iz falcon,
    eats on birds.
    
bird iz great_crested_flycatcher :-
    family iz flycatcher,
    tail iz long_rusty.
    
bird iz ash_throated_flycatcher :-
    family iz flycatcher,
    throat iz white.
    
bird iz barn_swallow:-
    family iz swallow,
    tail iz forked.
    
bird iz cliff_swallow:-
    family iz swallow,
    tail iz square.
    
bird iz purple_martin:-
    family iz swallow,
    color iz dark.

country iz united_states :- region iz new_england.
country iz united_states :- region iz south_east.
country iz united_states :- region iz mid_west.
country iz united_states :- region iz south_west.
country iz united_states :- region iz north_west.
country iz united_states :- region iz mid_atlantic.

country iz canada :- province iz ontario.
country iz canada :- province iz quebec.
country iz canada :- province iz etc.

region iz new_england :-
    state iz X,
    member(X, [massachusetts, vermont, etc]).

region iz south_east :-
    state iz X,
    member(X, [florida, mississippi, etc]).

region iz canada :-
    province iz X,
    member(X, [ontario,quebec,etc]).

nostrils are X :- ask(nostrils,X).
live iz X :- ask(live,X).
bill iz X :- ask(bill,X).
size iz X :- menuask(size,X,[large,plump,medium,small]).
eats on X :- ask(eats,X).
feet iz X :- ask(feet,X).
wings are X :- ask(wings,X).
neck iz X :- ask(neck,X).
color iz X :- ask(color,X).
flight iz X :- menuask(flight,X,[ponderous,powerful,agile,flap_glide,other]).
feed iz X :- ask(feed,X).
head iz X :- ask(head,X).
tail iz X :- menuask(tail,X,[narrow_at_tip,forked,long_rusty,square,other]).
voice iz X :- ask(voice,X).
season iz X :- menuask(season,X,[winter,summer]).
cheek iz X :- ask(cheek,X).
flight_profile iz X :- menuask(flight_profile,X,[flat,v_shaped,other]).
throat iz X :- ask(throat,X).
state iz X :- menuask(state,X,[massachusetts,vermont,florida,mississippi,etc]).
province iz X :- menuask(province,X,[ontario,quebec,etc]).

multivalued(voice).
%multivalued(color).
multivalued(eats).
*/
%------------------------------------

course(COSC_1P02) :- % Introduction to Computer Science
course(COSC_1P03) :- % Data Structures and Abstraction
  prerequisite(course(COSC_1P02)).
course(COSC_1P50) :- % Integrity and Literacy in the Information Age
course(MATH_1P66) :- % Mathematical Reasoning
course(MATH_1P67) :- % Mathematics for Computer Science
  prerequisite(course(MATH_1P66)).
course(COSC_2P03) :- % Advanced Data Structures
  prerequisite(course(COSC_1P03)).
course(COSC_2P12) :- % Computer Organization and Assembly Language
  prerequisite(course(COSC_1P03)).
course(COSC_2P13) :- % Introduction to Operating Systems
  prerequisite(course(COSC_2P12)).
course(COSC_2P32) :- % File and Database Systems
  prerequisite(course(COSC_2P03)).
course(COSC_2P89) :- % Internet Technologies
  prerequisite(course(COSC_1P03)).
course(COSC_2P90) :- % Programming Languages and Object-Orientation
  prerequisite(course(COSC_1P03)).
course(COSC_2P91) :- % Procedural Programming
  prerequisite(course(COSC_1P03)).
course(COSC_2P93) :- % Logic Programming
  prerequisite(course(COSC_2P03)).
course(COSC_2P96) :- % Introduction to 3D Modelling and Animation (???)
course(COSC_3F00) :- % Software Engineering
  prerequisite(course(COSC_2P03)),
  prerequisite(one and one-half COSC credits).
course(COSC_3P01) :- % Introduction to Computer Networking
  prerequisite(course(COSC_2P03)),
  prerequisite(course(COSC_2P13)),
  prerequisite(course(MATH_1P67)).
course(COSC_3P03) :- % Algorithms
  prerequisite(course(COSC_2P03)).
course(COSC_3P40) :- % Advanced Object-Oriented Programming
  prequisite(two COSC credits).
course(COSC_3P71) :- % Artificial Intelligence
  prerequisite(course(COSC_2P03)).
course(COSC_3P92) :- % Computer Architecture
  prerequisite(course(COSC_2P13)).
course(COSC_3P93) :- % Parallel Computing
  prerequisite(course(COSC_2P13)).
course(COSC_3P94) :- % Introduction to Human Computer Interaction
  prerequisite(two COSC credits).
course(COSC_3P95) :- % Embedded Software
  prerequisite(course(COSC_2P13)).
course(COSC_3P96) :- % Discrete Event Simulation
course(COSC_3P98) :- % Computer Graphics
  prerequisite(course(COSC_2P03)),
  prerequisite(course(MATH_1P12)),
  prerequisite(three COSC credits).
course(COSC_3P99) :- % Computing Project
  prerequisite(course(COSC_2P03)).
course(COSC_3V97) :- % Mobile Computing
  prerequisite(course(COSC_2P13)),
  prerequisite(course(COSC_2P32)).
course(COSC_4F90) :- % Computing Project
  prerequisite(course(COSC_3F00)).
course(COSC_4P03) :- % Advanced Algorithms
  prerequisite(course(COSC_3P03)).
course(COSC_4P13) :- % Operating Systems: Design and Implementation
  prerequisite(course(COSC_2P13)),
  prerequisite(course(COSC_2P91)).
course(COSC_4P14) :- % Computer Networks
  prerequisite(course(COSC_3P01)).
course(COSC_4P41) :- % Functional Programming
  prerequisite(three and one-half COSC credits).
course(COSC_4P42) :- % Formal Methods in Software Engineering
  prerequisite(course(MATH_1P67)),
  prerequisite(three and one-half COSC credits).
course(COSC_4P61) :- % Theory of Computation
  prerequisite(course(MATH_1P67)).
course(COSC_4P75) :- % Compiler Construction
  prerequisite(course(COSC_2P03)),
  prerequisite(course(COSC_2P12)),
  prerequisite(course(COSC_2P90)).
course(COSC_4P76) :- % Machine Learning
  prerequisite(course(COSC_3P71)).
course(COSC_4P78) :- % Robotics
  prerequisite(course(COSC_3P71)).
course(COSC_4P79) :- % Expert Systems
  prerequisite(course(COSC_2P93)),
  prerequisite(course(COSC_3P71)).
course(COSC_4P80) :- % Artificial Neural Networks
  prerequisite(course(COSC_3P71)).
course(COSC_4P87) :- % Foundations of Reasoning under Uncertainty
  prerequisite(course(COSC_3P71)).
course(COSC_4P98) :- % Topics in Computer Media and Digital Audio
  prerequisite(three and one-half COSC credits).
course(COSC_0N01) :- % Co-op Work Placement I
course(COSC_0N02) :- % Co-op Work Placement II
course(COSC_0N03) :- % Co-op Work Placement III
course(COSC_2C01) :- % Co-op Reflective Learning and Integration I
  prerequisite(course(SCIE_0N90)),
  corequisite(course(COSC_0N01)).
course(COSC_2C02) :- % Co-op Reflective Learning and Integration II
  prerequisite(course(SCIE_0N90)),
  corequisite(course(COSC_0N02)).
course(COSC_2C03) :- % Co-op Reflective Learning and Integration III
  prerequisite(course(SCIE_0N90)),
  corequisite(course(COSC_0N03)).
course(SCIE_0N90). % Co-op Training and Development


% Computer Science as a second degree program.
% - Holding an honours or Pass degree in another discipline (TODO: ask)
% - The additional courses taken for a second degree in Computer Science must
%   include a minimum of five (for a subsequent 20 credit degree) or four
%   (for a second Pass degree) Brock COSC credits. All elective credits should
%   be numbered 2(alpha)00 or above.
%
% Honours (TODO)
%
% BSc with Major (TODO)
%
% Pass
% Year 1
%   COSC 1P02, 1P03 and 1P50
%   MATH 1P12, 1P66, 1P67 and 1P98
% Spring/Summer Sessions:
%   COSC 2P03
% Year 2
%   COSC 2P12, 2P13, 2P32, 2P90 and 3F00
%   one-half COSC credit
%   one COSC credit numbered 2(alpha)90 or above
%


cosc as second degree program honours :-

cosc as second degree program bsc with major :-

cosc as second degree program pass :-
  course(COSC_1P02),
  course(COSC_1P03),
  course(COSC_1P50),
  course(MATH_1P12),
  course(MATH_1P66),
  course(MATH_1P67),
  course(MATH_1P98),
  course(COSC_2P03),
  course(COSC_2P12),
  course(COSC_2P13),
  course(COSC_2P32),
  course(COSC_2P90),
  course(COSC_3F00),
  course(one-half COSC credit),
  course(one COSC credit 2x90 or above).

degree(pass) :-
  course(COSC_1P03),
  course(COSC_1P67).

course(X) :- ask(course,X).
prerequisite(X) :- ask(prerequisite,X).
concentration(X) :- menuask(concentration,X,[intelligent_systems,software_engineering,none]).
gradschool(X) :- menuask(gradschool,X,[yes,no]). % TODO: consider making it an 'ask'

multivalued(course). % Multivalued because a rule can have many courses.
